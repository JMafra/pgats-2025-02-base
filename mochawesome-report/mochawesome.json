{
  "stats": {
    "suites": 4,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T17:37:15.521Z",
    "end": "2025-09-19T17:37:15.676Z",
    "duration": 155,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "321186b4-e0ab-4893-b527-b84c4d905569",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2c580eb5-a8d3-43c5-9e05-b411c123f0bb",
          "title": "Checkout Controller",
          "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoTestesCamadaServico\\projetov2\\pgats-2025-02-base\\test\\controller\\checkoutController.test.js",
          "file": "\\test\\controller\\checkoutController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54aa7e33-e16f-47df-aff3-4feed00a2153",
              "title": "POST /checkout",
              "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoTestesCamadaServico\\projetov2\\pgats-2025-02-base\\test\\controller\\checkoutController.test.js",
              "file": "\\test\\controller\\checkoutController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /checkout\"",
                  "fullTitle": "Checkout Controller POST /checkout \"before each\" hook in \"POST /checkout\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n     .post('/api/users/login')\n     .send({\n        email: 'alice@email.com',\n        password: '123456'  \n    });        \n token = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "fa2767f4-8264-4bba-b54a-dd488f8a838f",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando o token é inválido, retorna 401",
                  "fullTitle": "Checkout Controller POST /checkout Quando o token é inválido, retorna 401",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n     .post('/api/checkout')\n     .set('Authorization', 'Bearer token_invalido') // simula envio de token inválido\n     .send({\n         items: [{ productId: 1, quantity: 2 }],\n         freight: 10, \n           paymentMethod: 'credit_card',\n           cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n      });\n  expect(resposta.status).to.equal(401);      \n  expect(resposta.body).to.deep.equal({ error: 'Token inválido'});",
                  "err": {},
                  "uuid": "212d6b68-41e1-4920-b635-8da5d3a94360",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando os dados do checkout são inválidos, retorna 400",
                  "fullTitle": "Checkout Controller POST /checkout Quando os dados do checkout são inválidos, retorna 400",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n        .post('/api/checkout')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n            // Dados incompletos ou inválidos-sem items\n            freight: 10,\n            paymentMethod: 'credit_card',\n            cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n        });\n    expect(resposta.status).to.equal(400);\n    expect(resposta.body).to.have.property('error');",
                  "err": {},
                  "uuid": "4dc3ccaf-a3f7-4fbb-b8ff-66b784a58569",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando o checkout é realizado com sucesso, retorna 200",
                  "fullTitle": "Checkout Controller POST /checkout Quando o checkout é realizado com sucesso, retorna 200",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n        .post('/api/checkout')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n            items: [{ productId: 1, quantity: 2 }],\n            freight: 10,\n            paymentMethod: 'credit_card',\n            cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n        });\n    // Validação com um Fixture\n    const respostaEsperada = require('../fixture/respostas/QuandoCheckoutRealizadoComSucesso.json');\n        \n    expect(resposta.status).to.equal(200);      \n    expect(resposta.body).to.deep.equal(respostaEsperada);\n   /* expect(resposta.body).to.have.property('valorFinal');       \n    expect(resposta.body).to.have.property('items');\n    expect(resposta.body).to.have.property('freight');\n    expect(resposta.body).to.have.property('paymentMethod');\n    expect(resposta.body).to.have.property('total'); */",
                  "err": {},
                  "uuid": "5dc32f27-384d-4f4d-ac8d-b9f919c1f5c9",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando os dados do checkout são inválidos, retorna 400",
                  "fullTitle": "Checkout Controller POST /checkout Usando Mocks: Quando os dados do checkout são inválidos, retorna 400",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const checkoutMock = sinon.stub(checkoutService, 'checkout').throws(new Error('Dados do checkout inválidos'));   \ncheckoutMock.throws(new Error('Dados do checkout inválidos'));\n   \n const resposta = await request(app)\n     .post('/api/checkout')\n     .set('Authorization', `Bearer ${token}`)\n     .send({\n         // Dados incompletos ou inválidos-sem items\n         freight: 10,\n         paymentMethod: 'credit_card',\n         cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n     });\n expect(resposta.status).to.equal(400);\n expect(resposta.body).to.have.property('error');\n checkoutMock.restore();",
                  "err": {},
                  "uuid": "c35d0076-8fab-4258-9925-fe109c90d0f5",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando o checkout é realizado com sucesso, retorna 200",
                  "fullTitle": "Checkout Controller POST /checkout Usando Mocks: Quando o checkout é realizado com sucesso, retorna 200",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const checkoutMock = sinon.stub(checkoutService, 'checkout').returns({\n   userId: 1,\n   items: [{ productId: 1, quantity: 2 }],     \n   freight: 10,\n   paymentMethod: 'credit_card',\n   total: 100.00,\n        });\n    \n      const resposta = await request(app)\n   .post('/api/checkout')\n   .set('Authorization', `Bearer ${token}`)\n   .send({\n       items: [{ productId: 1, quantity: 2 }],\n       freight: 10,\n       paymentMethod: 'credit_card',\n       cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n   });\n\n        expect(resposta.status).to.equal(200);  \n       \n        // Validação com um Fixture\n        const respostaEsperada = require('../fixture/respostas/MockQuandoCheckoutRealizadoComSucesso.json');\n        \n        expect(resposta.body).to.deep.equal(respostaEsperada);\n       /* expect(resposta.body).to.have.property('valorFinal');       \n        expect(resposta.body).to.have.property('items');\n        expect(resposta.body).to.have.property('freight');\n        expect(resposta.body).to.have.property('paymentMethod');\n        expect(resposta.body).to.have.property('total');  */ \n       \n        checkoutMock.restore();",
                  "err": {},
                  "uuid": "06bbf915-6507-4090-92d9-309d528b7772",
                  "parentUUID": "54aa7e33-e16f-47df-aff3-4feed00a2153",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "212d6b68-41e1-4920-b635-8da5d3a94360",
                "4dc3ccaf-a3f7-4fbb-b8ff-66b784a58569",
                "5dc32f27-384d-4f4d-ac8d-b9f919c1f5c9",
                "c35d0076-8fab-4258-9925-fe109c90d0f5",
                "06bbf915-6507-4090-92d9-309d528b7772"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7f4ef596-32b9-4ad3-9fc7-ba0716444849",
          "title": "Checkout",
          "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoTestesCamadaServico\\projetov2\\pgats-2025-02-base\\test\\external\\checkoutExternal.test.js",
          "file": "\\test\\external\\checkoutExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8572539-195a-4c9a-a5d5-65843add864c",
              "title": "POST /checkout",
              "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoTestesCamadaServico\\projetov2\\pgats-2025-02-base\\test\\external\\checkoutExternal.test.js",
              "file": "\\test\\external\\checkoutExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /checkout\"",
                  "fullTitle": "Checkout POST /checkout \"before each\" hook in \"POST /checkout\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request('http://localhost:3000')\n     .post('/api/users/login')\n     .send({\n        email: 'alice@email.com',\n        password: '123456'  \n    });        \n token = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "0153d402-cb58-4d46-bf4a-c6e1033e6330",
                  "parentUUID": "f8572539-195a-4c9a-a5d5-65843add864c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando o token é inválido, retorna 401",
                  "fullTitle": "Checkout POST /checkout Quando o token é inválido, retorna 401",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n     .post('/api/checkout')\n     .set('Authorization', 'Bearer token_invalido') // simula envio de token inválido\n     .send({\n         items: [{ productId: 1, quantity: 2 }],\n         freight: 10, \n           paymentMethod: 'credit_card',\n           cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n      });\n  expect(resposta.status).to.equal(401);      \n  expect(resposta.body).to.deep.equal({ error: 'Token inválido'});",
                  "err": {},
                  "uuid": "c31258d6-3db6-4c8d-bbd4-a21301e35591",
                  "parentUUID": "f8572539-195a-4c9a-a5d5-65843add864c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando os dados do checkout são inválidos, retorna 400",
                  "fullTitle": "Checkout POST /checkout Quando os dados do checkout são inválidos, retorna 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n   .post('/api/checkout')\n   .set('Authorization', `Bearer ${token}`)\n   .send({\n       // Dados incompletos ou inválidos-sem items\n       freight: 10,\n       paymentMethod: 'credit_card',\n       cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n   });\n\n        expect(resposta.status).to.equal(400);\n        expect(resposta.body).to.have.property('error');",
                  "err": {},
                  "uuid": "14647652-ce46-4ac1-b588-fdb2981fb418",
                  "parentUUID": "f8572539-195a-4c9a-a5d5-65843add864c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando o checkout é realizado com sucesso, retorna 200",
                  "fullTitle": "Checkout POST /checkout Quando o checkout é realizado com sucesso, retorna 200",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        items: [{ productId: 1, quantity: 2 }],\n        freight: 10,\n        paymentMethod: 'credit_card',\n        cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n    });\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/QuandoCheckoutRealizadoComSucesso.json');\n    \nexpect(resposta.status).to.equal(200);      \nexpect(resposta.body).to.deep.equal(respostaEsperada);\n       /* expect(resposta.body).to.have.property('valorFinal');       \nexpect(resposta.body).to.have.property('items');\nexpect(resposta.body).to.have.property('freight');\nexpect(resposta.body).to.have.property('paymentMethod');\nexpect(resposta.body).to.have.property('total'); */",
                  "err": {},
                  "uuid": "e3fda7a5-446a-4fc5-ab65-5a927a64df81",
                  "parentUUID": "f8572539-195a-4c9a-a5d5-65843add864c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c31258d6-3db6-4c8d-bbd4-a21301e35591",
                "14647652-ce46-4ac1-b588-fdb2981fb418",
                "e3fda7a5-446a-4fc5-ab65-5a927a64df81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}