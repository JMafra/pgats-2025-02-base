{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T21:16:20.534Z",
    "end": "2025-09-21T21:16:20.642Z",
    "duration": 108,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "246e0863-6764-4d3e-ace9-bd1327b70108",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f11e85f0-4b21-45d2-bc75-e202cd74df68",
          "title": "Checkout Rest",
          "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoAPI\\projetov2\\pgats-2025-02-base\\test\\external\\checkoutExternal.test.js",
          "file": "\\test\\external\\checkoutExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad2a845b-67dc-427f-865b-5ba8e928d549",
              "title": "POST /checkout",
              "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoAPI\\projetov2\\pgats-2025-02-base\\test\\external\\checkoutExternal.test.js",
              "file": "\\test\\external\\checkoutExternal.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /checkout\"",
                  "fullTitle": "Checkout Rest POST /checkout \"before each\" hook in \"POST /checkout\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request('http://localhost:3000')\n     .post('/api/users/login')\n     .send({\n        email: 'alice@email.com',\n        password: '123456'  \n    });        \n token = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "36d492c3-259f-4f39-9b05-edd739be4939",
                  "parentUUID": "ad2a845b-67dc-427f-865b-5ba8e928d549",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando o token é inválido, retorna 401",
                  "fullTitle": "Checkout Rest POST /checkout Quando o token é inválido, retorna 401",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n     .post('/api/checkout')\n     .set('Authorization', 'Bearer token_invalido') // simula envio de token inválido\n     .send({\n         items: [{ productId: 1, quantity: 2 }],\n         freight: 10, \n           paymentMethod: 'credit_card',\n           cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n      });\n  expect(resposta.status).to.equal(401);      \n  expect(resposta.body).to.deep.equal({ error: 'Token inválido'});",
                  "err": {},
                  "uuid": "43b4b0d4-ff20-4a9a-b9a2-940afd286153",
                  "parentUUID": "ad2a845b-67dc-427f-865b-5ba8e928d549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando os dados do checkout são inválidos, retorna 400",
                  "fullTitle": "Checkout Rest POST /checkout Quando os dados do checkout são inválidos, retorna 400",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n   .post('/api/checkout')\n   .set('Authorization', `Bearer ${token}`)\n   .send({\n       // Dados incompletos ou inválidos-sem items\n       freight: 10,\n       paymentMethod: 'credit_card',\n       cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n   });\n\n        expect(resposta.status).to.equal(400);\n        expect(resposta.body).to.have.property('error');",
                  "err": {},
                  "uuid": "b97c61d5-e881-4756-a813-bb67e818e432",
                  "parentUUID": "ad2a845b-67dc-427f-865b-5ba8e928d549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando o checkout é realizado com sucesso, retorna 200",
                  "fullTitle": "Checkout Rest POST /checkout Quando o checkout é realizado com sucesso, retorna 200",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        items: [{ productId: 1, quantity: 2 }],\n        freight: 10,\n        paymentMethod: 'credit_card',\n        cardData: { number: '1234-5678-9012-3456', expiry: '12/25', cvv: '123' },\n    });\n// Validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/QuandoCheckoutRealizadoComSucesso.json');\n    \nexpect(resposta.status).to.equal(200);      \nexpect(resposta.body).to.deep.equal(respostaEsperada);\n       /* expect(resposta.body).to.have.property('valorFinal');       \nexpect(resposta.body).to.have.property('items');\nexpect(resposta.body).to.have.property('freight');\nexpect(resposta.body).to.have.property('paymentMethod');\nexpect(resposta.body).to.have.property('total'); */",
                  "err": {},
                  "uuid": "0eff1a1e-b525-4d1b-a467-aa38ce1c7847",
                  "parentUUID": "ad2a845b-67dc-427f-865b-5ba8e928d549",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43b4b0d4-ff20-4a9a-b9a2-940afd286153",
                "b97c61d5-e881-4756-a813-bb67e818e432",
                "0eff1a1e-b525-4d1b-a467-aa38ce1c7847"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b8dc8837-0e04-462d-8c58-ca8075d7a9a2",
          "title": "Checkout GraphQL",
          "fullFile": "C:\\Users\\user\\Downloads\\PosAutomacaoTestes\\Disciplinas\\AutomacaoAPI\\projetov2\\pgats-2025-02-base\\test\\external\\checkoutExternalGraphQL.test.js",
          "file": "\\test\\external\\checkoutExternalGraphQL.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Checkout GraphQL\"",
              "fullTitle": "Checkout GraphQL \"before each\" hook in \"Checkout GraphQL\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request('http://localhost:4000')\n        .post('/graphql')\n        .send({\n           query: `\n                 mutation Mutation($email: String!, $password: String!) { \n                    login(email: $email, password: $password) {\n                       token \n                   }\n                 }`,\n           variables:{  \n               email: 'alice@email.com',\n               password: '123456'\n           }\n        });  \n   token =  resposta.body.data.login.token;",
              "err": {},
              "uuid": "a5b9516f-48b9-4fde-9aed-2cb4f6eed99f",
              "parentUUID": "b8dc8837-0e04-462d-8c58-ca8075d7a9a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GraphQL: Quando o checkout é realizado com sucesso, retorna 200",
              "fullTitle": "Checkout GraphQL GraphQL: Quando o checkout é realizado com sucesso, retorna 200",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaCheckout  = await request('http://localhost:4000')\n      .post('/graphql')\n      .set('Authorization', `Bearer ${token}` )\n      .send({\n          query: ` \n            mutation Checkout($items: [CheckoutItemInput!]!, $freight: Float!, $paymentMethod: String!) {\n           checkout(items: $items, freight: $freight, paymentMethod: $paymentMethod) {\n               freight\n               items {\n               quantity\n               productId\n               }\n            }\n           }\n          `,\n          variables: {\n             items: [{ productId: 1, quantity: 2 }],\n             freight: 10,\n             paymentMethod: 'boleto'\n          }\n      });\n      expect(respostaCheckout.status).to.equal(200)",
              "err": {},
              "uuid": "4d769121-1e59-42b6-ba7b-f94c47a01e17",
              "parentUUID": "b8dc8837-0e04-462d-8c58-ca8075d7a9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GraphQL: Quando os dados do checkout são inválidos, retorna 400",
              "fullTitle": "Checkout GraphQL GraphQL: Quando os dados do checkout são inválidos, retorna 400",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaCheckout  = await request('http://localhost:4000')\n      .post('/graphql')\n      .set('Authorization', `Bearer ${token}` )\n      .send({\n          query: ` \n            mutation Checkout($items: [CheckoutItemInput!]!, $freight: Float!, $paymentMethod: String!) {\n           checkout(items: $items, freight: $freight, paymentMethod: $paymentMethod) {\n               freight\n               items {\n               quantity\n               productId\n               }\n            }\n           }\n          `,\n          variables: {                \n             freight: 10,\n             paymentMethod: 'boleto'\n          }\n      });\n      expect(respostaCheckout.status).to.equal(400)",
              "err": {},
              "uuid": "172bd99b-73d1-42f0-85c6-834b6a9e793c",
              "parentUUID": "b8dc8837-0e04-462d-8c58-ca8075d7a9a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d769121-1e59-42b6-ba7b-f94c47a01e17",
            "172bd99b-73d1-42f0-85c6-834b6a9e793c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}